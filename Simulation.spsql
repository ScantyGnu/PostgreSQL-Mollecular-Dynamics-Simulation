DO $$
DECLARE
	num_atoms INT = 2;

	pred_pos FLOAT = 0;
	pred_vel FLOAT = 0;

	curr_pos FLOAT = 0;
	prev_step INT = 0;
	curr_vel FLOAT = 0;
	curr_acc FLOAT = 0;
	curr_frc FLOAT = 0;

	spring_constant FLOAT = 30;
	mass FLOAT = 0.0026;
	time_step FLOAT = 0.001;
	init_frc FLOAT = 5; 

BEGIN
	-- Clear past tables
	DROP TABLE atoms;
	DROP TABLE init_atoms;
	   
	-- Initialize atoms table
	CREATE TABLE atoms (step INT, atom INT, pos FLOAT, vel FLOAT, acc FLOAT, frc FLOAT);

	-- Give atoms initial forces 
	CREATE TABLE init_atoms (step INT, atom INT, pos FLOAT, vel FLOAT, acc FLOAT, frc FLOAT);
	INSERT INTO init_atoms VALUES (0, 0, 0, 0, 0, 1);    
	INSERT INTO init_atoms VALUES (0, 1, 0, 0, 0, 2);
	INSERT INTO init_atoms VALUES (0, 2, 0, 0, 0, 3);
    
	-- Copy initial states to atoms table
	FOR curr_atom IN 0..num_atoms LOOP
	INSERT INTO atoms
  		SELECT * FROM init_Atoms WHERE atom = curr_atom;
  	END LOOP;
 
	-- Iterate through atoms in each step and update values
	FOR curr_step IN 1..9 LOOP
        	prev_step = curr_step - 1;

        	FOR curr_atom IN 0..num_atoms LOOP
          	-- Retrieve previous values
          	EXECUTE FORMAT('SELECT atoms.pos FROM atoms WHERE atom = %s AND step = %s', curr_atom, prev_step) INTO curr_pos;
          	EXECUTE FORMAT('SELECT atoms.vel FROM atoms WHERE atom = %s AND step = %s', curr_atom, prev_step) INTO curr_vel;
          	EXECUTE FORMAT('SELECT atoms.acc FROM atoms WHERE atom = %s AND step = %s', curr_atom, prev_step) INTO curr_acc;
          	EXECUTE FORMAT('SELECT atoms.frc FROM atoms WHERE atom = %s AND step = %s', curr_atom, prev_step) INTO curr_frc;

          	-- Update the values for the current step
          	curr_pos = curr_pos + (curr_vel * time_step);
          	curr_vel = curr_vel + (curr_acc * time_step);
          	curr_acc = curr_frc / mass;
          	curr_frc = (-spring_constant) * curr_pos;

          	-- Insert the updated values into the "atoms" table
          	INSERT INTO atoms VALUES (curr_step, curr_atom, curr_pos, curr_vel, curr_acc, curr_frc);
      	END LOOP;

    END LOOP;
   
END; $$
